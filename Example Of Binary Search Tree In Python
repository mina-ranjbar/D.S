#Example 1
# Python3 function to search a given key in a given BST

class Node:
	# Constructor to create a new node
	def __init__(self, key):
		self.key = key
		self.left = None
		self.right = None

# A utility function to insert
# a new node with the given key in BST
def insert(node, key):
	# If the tree is empty, return a new node
	if node is None:
		return Node(key)

	# Otherwise, recur down the tree
	if key < node.key:
		node.left = insert(node.left, key)
	elif key > node.key:
		node.right = insert(node.right, key)

	# Return the (unchanged) node pointer
	return node

# Utility function to search a key in a BST
def search(root, key):
	# Base Cases: root is null or key is present at root
	if root is None or root.key == key:
		return root

	# Key is greater than root's key
	if root.key < key:
		return search(root.right, key)

	# Key is smaller than root's key
	return search(root.left, key)

# Driver Code
if __name__ == '__main__':
	root = None
	root = insert(root, 50)
	insert(root, 30)
	insert(root, 20)
	insert(root, 40)
	insert(root, 70)
	insert(root, 60)
	insert(root, 80)

	# Key to be found
	key = 6

	# Searching in a BST
	if search(root, key) is None:
		print(key, "not found")
	else:
		print(key, "found")

	key = 60

	# Searching in a BST
	if search(root, key) is None:
		print(key, "not found")
	else:
		print(key, "found")


#output:
6 not found
60 found



#Example 2
# Binary Search Tree operations in Python


# Create a node
class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None


# Inorder traversal
def inorder(root):
    if root is not None:
        # Traverse left
        inorder(root.left)

        # Traverse root
        print(str(root.key) + "->", end=' ')

        # Traverse right
        inorder(root.right)


# Insert a node
def insert(node, key):

    # Return a new node if the tree is empty
    if node is None:
        return Node(key)

    # Traverse to the right place and insert the node
    if key < node.key:
        node.left = insert(node.left, key)
    else:
        node.right = insert(node.right, key)

    return node


# Find the inorder successor
def minValueNode(node):
    current = node

    # Find the leftmost leaf
    while(current.left is not None):
        current = current.left

    return current


# Deleting a node
def deleteNode(root, key):

    # Return if the tree is empty
    if root is None:
        return root

    # Find the node to be deleted
    if key < root.key:
        root.left = deleteNode(root.left, key)
    elif(key > root.key):
        root.right = deleteNode(root.right, key)
    else:
        # If the node is with only one child or no child
        if root.left is None:
            temp = root.right
            root = None
            return temp

        elif root.right is None:
            temp = root.left
            root = None
            return temp

        # If the node has two children,
        # place the inorder successor in position of the node to be deleted
        temp = minValueNode(root.right)

        root.key = temp.key

        # Delete the inorder successor
        root.right = deleteNode(root.right, temp.key)

    return root


root = None
root = insert(root, 8)
root = insert(root, 3)
root = insert(root, 1)
root = insert(root, 6)
root = insert(root, 7)
root = insert(root, 10)
root = insert(root, 14)
root = insert(root, 4)

print("Inorder traversal: ", end=' ')
inorder(root)

print("\nDelete 10")
root = deleteNode(root, 10)
print("Inorder traversal: ", end=' ')
inorder(root)


#output:
Inorder traversal:  1-> 3-> 4-> 6-> 7-> 8-> 10-> 14-> 
Delete 10
Inorder traversal:  1-> 3-> 4-> 6-> 7-> 8-> 14->


#Example 3
# Python program to implement search operation in the binary search tree

# Creating a constructor class that will create the node object
class Node:
 # Defining the method to create a new node and the left and right pointers of this node.
 def __init__(self, val):
  self.val = val
  self.left = None
  self.right = None

# Defining a function that will search the given value of x in the tree
def search(root, x):

  # The base conditions are
  # If the given root is a Null Node
  # Or if the value we are searching for is present at the root only
  if root is None or root.val == x:
    return root.val

  # If the value of x is greater than the value of the root node
  if root.val < x:
    # We will search in the right subtree
    return search(root.right, x)

  # If the value of x is smaller than the value of the root node
  # We will search in the left subtree
  return search(root.left, x)

# Creating a binary search tree and searching for x in the tree
root = Node(9)
root.left = Node(1)
root.right = Node(10)
root.left.left = Node(0)
root.left.right = Node(3)
root.left.right.right = Node(4)
x = 4
v = search(root, x)
print("The node we are searching for is present in the given BST: ", v)


#output:
The node we are searching for is present in the given BST:  4



#Example 4
# Python program to show how to insert a value in the binary search tree

# Creating a constructor class that will create the node object
class Node:
 # Defining the method to create a new node and the left and right pointers of this node.
 def __init__(self, val):
  self.val = val
  self.left = None
  self.right = None


# Defining a function to insert the given value of x into the tree
def insert(root, x):
  # If the given tree is empty, we will return a node with the given value
  if root is None:
    return Node(x)
  else:
    # We will check if the value of the current node is equal to the value we want to insert
    if root.val == x:
      # If yes, then there is no need to modify the tree, and we will return the root node
      return root
    # If the value of x is greater than the value of the root node
    elif root.val < x:
      # We will insert the node in the right subtree
      root.right = insert(root.right, x)
    # If the value of x is smaller than the value of the root node
    else:
      # We will insert the node in the left subtree
      root.left = insert(root.left, x)
  return root


# Creating a function to traverse the tree to check the final results
def inorderTraversal(root):
  if root:
    inorderTraversal(root.left)
    print(root.val, end = " ")
    inorderTraversal(root.right)


# Creating a binary search tree and inserting x in the tree
root = Node(9)
root.left = Node(1)
root.right = Node(10)
root.left.left = Node(0)
root.left.right = Node(3)
root.left.right.right = Node(4)
print("The tree before insertion: ")
inorderTraversal(root)
print("\n")
x = 5
v = insert(root, x)
print("The tree after insertion: ")
inorderTraversal(v)


#output:
The tree before insertion: 
0 1 3 4 9 10 

The tree after insertion: 
0 1 3 4 5 9 10 
