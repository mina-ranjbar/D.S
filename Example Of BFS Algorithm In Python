#Example 1
graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}

visited = [] # List for visited nodes.
queue = []     #Initialize a queue

def bfs(visited, graph, node): #function for BFS
  visited.append(node)
  queue.append(node)

  while queue:          # Creating loop to visit each node
    m = queue.pop(0)
    print (m, end = " ")

    for neighbour in graph[m]:
      if neighbour not in visited:
        visited.append(neighbour)
        queue.append(neighbour)

# Driver Code
print("Following is the Breadth-First Search")
bfs(visited, graph, '5')    # function calling


#output:
Following is the Breadth-First Search
5 3 7 2 4 8 


#Example 2

from collections import deque

def bfs(graph, start):
    visited = set()
    queue = deque([start])
    while queue:
        vertex = queue.popleft()
        if vertex not in visited:
            visited.add(vertex)
            print(vertex)
            queue.extend(graph[vertex] - visited)

# Example usage
graph = {
    'A': set(['B', 'C']),
    'B': set(['A', 'D', 'E']),
    'C': set(['A', 'F']),
    'D': set(['B']),
    'E': set(['B', 'F']),
    'F': set(['C', 'E'])
}

bfs(graph, 'A')


#output:
A
C
B
F
E
D


#Example 3

def bfs(graph, start):
    queue = [start]
    visited = set([start])

    while queue:
        vertex = queue.pop(0)
        print(vertex)

        for neighbor in graph[vertex]:
            if neighbor not in visited:
                queue.append(neighbor)
                visited.add(neighbor)

graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F', 'G'],
    'D': [],
    'E': ['F'],
    'F': [],
    'G': []
}

def bfs(graph, start):
    visited = [] # List to keep track of visited nodes
    queue = [start] # Initialize a queue

    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.append(node)
            neighbours = graph[node]

            for neighbour in neighbours:
                queue.append(neighbour)

    return visited

print(bfs(graph, 'A'))


#output:
['A', 'B', 'C', 'D', 'E', 'F', 'G']



#Example 4
# BFS algorithm in Python


import collections

# BFS algorithm
def bfs(graph, root):

    visited, queue = set(), collections.deque([root])
    visited.add(root)

    while queue:

        # Dequeue a vertex from queue
        vertex = queue.popleft()
        print(str(vertex) + " ", end="")

        # If not visited, mark it as visited, and
        # enqueue it
        for neighbour in graph[vertex]:
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(neighbour)


if __name__ == '__main__':
    graph = {0: [1, 2], 1: [2], 2: [3], 3: [1, 2]}
    print("Following is Breadth First Traversal: ")
    bfs(graph, 0)


#output:
Following is Breadth First Traversal: 
0 1 2 3 



#Example 5
# Python code to give the traversed path by BFS algorithm as output. BFS(int n) scans through the vertices which are reachable from n.
from collections import defaultdict as dd

class Graph:

    # Constructing a list
    def __init__(self):

        # default dictionary to store graph
        self.graph = dd(list)

    # defining function which will add edge to the graph
    def addEdgetoGraph(self, x, y):
        self.graph[x].append(y)

    # defining function to print BFS traverse
    def BFSearch(self, n):

        # Initially marking all vertices as not visited
        visited_vertices = ( len(self.graph ))*[False]

        # creating a queue for visited vertices
        queue = []

        # setting source node as visited and adding it to the queue
        visited_vertices[n] = True
        queue.append(n)


        while queue:

            # popping the element from the queue which is printed
            n = queue.pop(0)
            print (n, end = " ")

            # getting vertices adjacent to the vertex n which is dequed.
            for v in self.graph[ n ]:
                if visited_vertices[v] == False:
                    queue.append(v)
                    visited_vertices[v] = True


# Example code
# Initializing a graph
graph = Graph()
graph.addEdgetoGraph(0, 1)
graph.addEdgetoGraph(1, 1)
graph.addEdgetoGraph(2, 2)
graph.addEdgetoGraph(3, 1)
graph.addEdgetoGraph(4, 3)
graph.addEdgetoGraph(5, 4)

print ( " The Breadth First Search Traversal for The Graph is as Follows: " )
graph.BFSearch(3)


#output:
 The Breadth First Search Traversal for The Graph is as Follows: 
3 1 



#Example 6
# Implementing BFS in NetworkX
bfs = list(nx.bfs_tree(G=G, source='A'))
print(bfs)

# Returns:
['A', 'B', 'C', 'D', 'E', 'F']



#output:
['A', 'B', 'C', 'D', 'E', 'F']
['A', 'B', 'C', 'D', 'E', 'F']
