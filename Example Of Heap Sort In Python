#Example 1
#!/usr/bin/python
# -*- coding: utf-8 -*-
# Python program for implementation of heap Sort

# To heapify subtree rooted at index i.
# n is size of heap


def heapify(arr, n, i):
	largest = i # Initialize largest as root
	l = 2 * i + 1 # left = 2*i + 1
	r = 2 * i + 2 # right = 2*i + 2

# See if left child of root exists and is
# greater than root

	if l < n and arr[i] < arr[l]:
		largest = l

# See if right child of root exists and is
# greater than root

	if r < n and arr[largest] < arr[r]:
		largest = r

# Change root, if needed

	if largest != i:
		(arr[i], arr[largest]) = (arr[largest], arr[i]) # swap

# Heapify the root.

		heapify(arr, n, largest)


# The main function to sort an array of given size

def heapSort(arr):
	n = len(arr)

# Build a maxheap.
# Since last parent will be at (n//2) we can start at that location.

	for i in range(n // 2, -1, -1):
		heapify(arr, n, i)

# One by one extract elements

	for i in range(n - 1, 0, -1):
		(arr[i], arr[0]) = (arr[0], arr[i]) # swap
		heapify(arr, i, 0)


# Driver code to test above

arr = [12, 11, 13, 5, 6, 7, ]
heapSort(arr)
n = len(arr)
print('Sorted array is')
for i in range(n):
	print(arr[i])

# This code is contributed by Mohit Kumra


#output:
Sorted array is
5
6
7
11
12
13



#Example 2
import heapq

# Function to perform the sorting using
# heaop sort
def heap_sort(arr):
	heapq.heapify(arr)
	result = []
	while arr:
		result.append(heapq.heappop(arr))
	return result

# Driver Code
arr = [60, 20, 40, 70, 30, 10]
print("Input Array: ", arr)
print("Sorted Array: ", heap_sort(arr))


#output:
Input Array:  [60, 20, 40, 70, 30, 10]
Sorted Array:  [10, 20, 30, 40, 60, 70]




#Example 3
def heapify(array, a, b):
	largest = b
	l = 2 * b + 1
	root = 2 * b + 2

	if l < a and array[b] < array[l]:
		largest = l

	if root < a and array[largest] < array[root]:
		largest = root

	# Change root
	if largest != b:
	    array[b], array[largest] = array[largest], array[b]
	    heapify(array, a, largest)

# sort an array of given size
def Heap_Sort(array):
	a = len(array)

	# maxheap..
	for b in range(a // 2 - 1, -1, -1):
		heapify(array, a, b)

	# extract elements
	for b in range(a-1, 0, -1):
		array[b], array[0] = array[0], array[b] # swap
		heapify(array, b, 0)

# Driver code
array = [ 7, 2, 5, 6, 3, 1, 8, 4]
print("The original array is: ", array)
Heap_Sort(array)
a = len(array)
print ("Array after sorting is: ", array)



#output:
The original array is:  [7, 2, 5, 6, 3, 1, 8, 4]
Array after sorting is:  [1, 2, 3, 4, 5, 6, 7, 8]


