#Example 1
# Python3 implementation of Max Heap
import sys

class MaxHeap:

	def __init__(self, maxsize):

		self.maxsize = maxsize
		self.size = 0
		self.Heap = [0] * (self.maxsize + 1)
		self.Heap[0] = sys.maxsize
		self.FRONT = 1

	# Function to return the position of
	# parent for the node currently
	# at pos
	def parent(self, pos):

		return pos // 2

	# Function to return the position of
	# the left child for the node currently
	# at pos
	def leftChild(self, pos):

		return 2 * pos

	# Function to return the position of
	# the right child for the node currently
	# at pos
	def rightChild(self, pos):

		return (2 * pos) + 1

	# Function that returns true if the passed
	# node is a leaf node
	def isLeaf(self, pos):

		if pos >= (self.size//2) and pos <= self.size:
			return True
		return False

	# Function to swap two nodes of the heap
	def swap(self, fpos, spos):

		self.Heap[fpos], self.Heap[spos] = (self.Heap[spos],self.Heap[fpos])

	# Function to heapify the node at pos
	def maxHeapify(self, pos):

		# If the node is a non-leaf node and smaller
		# than any of its child
		if not self.isLeaf(pos):
			if (self.Heap[pos] < self.Heap[self.leftChild(pos)] or
				self.Heap[pos] < self.Heap[self.rightChild(pos)]):

				# Swap with the left child and heapify
				# the left child
				if (self.Heap[self.leftChild(pos)] >
					self.Heap[self.rightChild(pos)]):
					self.swap(pos, self.leftChild(pos))
					self.maxHeapify(self.leftChild(pos))

				# Swap with the right child and heapify
				# the right child
				else:
					self.swap(pos, self.rightChild(pos))
					self.maxHeapify(self.rightChild(pos))

	# Function to insert a node into the heap
	def insert(self, element):

		if self.size >= self.maxsize:
			return
		self.size += 1
		self.Heap[self.size] = element

		current = self.size

		while (self.Heap[current] >
			self.Heap[self.parent(current)]):
			self.swap(current, self.parent(current))
			current = self.parent(current)

	# Function to print the contents of the heap
	def Print(self):

		for i in range(1, (self.size // 2) + 1):
			print("PARENT : " + str(self.Heap[i]) +
				"LEFT CHILD : " + str(self.Heap[2 * i]) +
				"RIGHT CHILD : " + str(self.Heap[2 * i + 1]))

	# Function to remove and return the maximum
	# element from the heap
	def extractMax(self):

		popped = self.Heap[self.FRONT]
		self.Heap[self.FRONT] = self.Heap[self.size]
		self.size -= 1
		self.maxHeapify(self.FRONT)

		return popped

# Driver Code
if __name__ == "__main__":

	print('The maxHeap is ')

	maxHeap = MaxHeap(15)
	maxHeap.insert(5)
	maxHeap.insert(3)
	maxHeap.insert(17)
	maxHeap.insert(10)
	maxHeap.insert(84)
	maxHeap.insert(19)
	maxHeap.insert(6)
	maxHeap.insert(22)
	maxHeap.insert(9)

	maxHeap.Print()

	print("The Max val is " + str(maxHeap.extractMax()))


#output:
The maxHeap is 
PARENT : 84LEFT CHILD : 22RIGHT CHILD : 19
PARENT : 22LEFT CHILD : 17RIGHT CHILD : 10
PARENT : 19LEFT CHILD : 5RIGHT CHILD : 6
PARENT : 17LEFT CHILD : 3RIGHT CHILD : 9
The Max val is 84



#Example 2
from heapq import _heapify_max, _heappop_max, _siftdown_max

# Implementing heappush for max_heap
# Time Complexity = Θ(1 + logn)
def heappush_max(max_heap, item):
	max_heap.append(item)
	_siftdown_max(max_heap, 0, len(max_heap)-1)

def max_heap(arr):
	copy = arr.copy() # Just maintaining a copy for later use

	# Time Complexity = Θ(n); n = no of elements in array
	_heapify_max(arr) # Converts array to max_heap

	# Time Complexity = Θ(logk); k = no of elements in heap
	while len(arr) != 0: # popping items from max_heap
		print(_heappop_max(arr)) # ... unless its empty

	arr = copy # since len(arr) = 0
	max_heap = []
	# Time Complexity = Θ(nlogk) - since inserting item one by one
	for item in arr:
		heappush_max(max_heap, item)
	print("Max Heap is Ready!")
	# Time Complexity = Θ(logk); k = no of elements in heap
	while len(max_heap) != 0: # popping items from max_heap
		print(_heappop_max(max_heap)) # ... unless its empty


arr = [6,8,9,2,1,5]
max_heap(arr)
# This code is contributed by Swagato Chakraborty (swagatochakraborty123)



#output:
9
8
6
5
2
1
Max Heap is Ready!
9
8
6
5
2
1




#Example 3
# Python3 implementation of Min Heap

import sys

class MinHeap:

	def __init__(self, maxsize):
		self.maxsize = maxsize
		self.size = 0
		self.Heap = [0]*(self.maxsize + 1)
		self.Heap[0] = -1 * sys.maxsize
		self.FRONT = 1

	# Function to return the position of
	# parent for the node currently
	# at pos
	def parent(self, pos):
		return pos//2

	# Function to return the position of
	# the left child for the node currently
	# at pos
	def leftChild(self, pos):
		return 2 * pos

	# Function to return the position of
	# the right child for the node currently
	# at pos
	def rightChild(self, pos):
		return (2 * pos) + 1

	# Function that returns true if the passed
	# node is a leaf node
	def isLeaf(self, pos):
		return pos*2 > self.size

	# Function to swap two nodes of the heap
	def swap(self, fpos, spos):
		self.Heap[fpos], self.Heap[spos] = self.Heap[spos], self.Heap[fpos]

	# Function to heapify the node at pos
	def minHeapify(self, pos):

		# If the node is a non-leaf node and greater
		# than any of its child
		if not self.isLeaf(pos):
			if (self.Heap[pos] > self.Heap[self.leftChild(pos)] or
			self.Heap[pos] > self.Heap[self.rightChild(pos)]):

				# Swap with the left child and heapify
				# the left child
				if self.Heap[self.leftChild(pos)] < self.Heap[self.rightChild(pos)]:
					self.swap(pos, self.leftChild(pos))
					self.minHeapify(self.leftChild(pos))

				# Swap with the right child and heapify
				# the right child
				else:
					self.swap(pos, self.rightChild(pos))
					self.minHeapify(self.rightChild(pos))

	# Function to insert a node into the heap
	def insert(self, element):
		if self.size >= self.maxsize :
			return
		self.size+= 1
		self.Heap[self.size] = element

		current = self.size

		while self.Heap[current] < self.Heap[self.parent(current)]:
			self.swap(current, self.parent(current))
			current = self.parent(current)

	# Function to print the contents of the heap
	def Print(self):
		for i in range(1, (self.size//2)+1):
			print(" PARENT : "+ str(self.Heap[i])+" LEFT CHILD : "+
								str(self.Heap[2 * i])+" RIGHT CHILD : "+
								str(self.Heap[2 * i + 1]))

	# Function to build the min heap using
	# the minHeapify function
	def minHeap(self):

		for pos in range(self.size//2, 0, -1):
			self.minHeapify(pos)

	# Function to remove and return the minimum
	# element from the heap
	def remove(self):

		popped = self.Heap[self.FRONT]
		self.Heap[self.FRONT] = self.Heap[self.size]
		self.size-= 1
		self.minHeapify(self.FRONT)
		return popped

# Driver Code
if __name__ == "__main__":

	print('The minHeap is ')
	minHeap = MinHeap(15)
	minHeap.insert(5)
	minHeap.insert(3)
	minHeap.insert(17)
	minHeap.insert(10)
	minHeap.insert(84)
	minHeap.insert(19)
	minHeap.insert(6)
	minHeap.insert(22)
	minHeap.insert(9)
	minHeap.minHeap()

	minHeap.Print()
	print("The Min val is " + str(minHeap.remove()))


#output:
The minHeap is 
 PARENT : 3 LEFT CHILD : 5 RIGHT CHILD : 6
 PARENT : 5 LEFT CHILD : 9 RIGHT CHILD : 84
 PARENT : 6 LEFT CHILD : 19 RIGHT CHILD : 17
 PARENT : 9 LEFT CHILD : 22 RIGHT CHILD : 10
The Min val is 3



#Example 4
# Max-Heap data structure in Python

def heapify(arr, n, i):
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2

    if l < n and arr[i] < arr[l]:
        largest = l

    if r < n and arr[largest] < arr[r]:
        largest = r

    if largest != i:
        arr[i],arr[largest] = arr[largest],arr[i]
        heapify(arr, n, largest)

def insert(array, newNum):
    size = len(array)
    if size == 0:
        array.append(newNum)
    else:
        array.append(newNum);
        for i in range((size//2)-1, -1, -1):
            heapify(array, size, i)

def deleteNode(array, num):
    size = len(array)
    i = 0
    for i in range(0, size):
        if num == array[i]:
            break

    array[i], array[size-1] = array[size-1], array[i]

    array.remove(num)

    for i in range((len(array)//2)-1, -1, -1):
        heapify(array, len(array), i)

arr = []

insert(arr, 3)
insert(arr, 4)
insert(arr, 9)
insert(arr, 5)
insert(arr, 2)

print ("Max-Heap array: " + str(arr))

deleteNode(arr, 4)
print("After deleting an element: " + str(arr))


#output:
Max-Heap array: [9, 5, 4, 3, 2]
After deleting an element: [9, 5, 2, 3]



#Example 5
import sys

class MaxHeap:

    def __init__(self, maxsize):

        self.maxsize = maxsize
        self.size = 0
        self.Heap = [0] * (self.maxsize + 1)
        self.Heap[0] = sys.maxsize
        self.FRONT = 1

    def parent(self, pos):

        return pos // 2

    def leftChild(self, pos):

        return 2 * pos

    def rightChild(self, pos):

        return (2 * pos) + 1

    def isLeaf(self, pos):

        if pos >= (self.size//2) and pos <= self.size:
            return True
        return False

    def swap(self, fpos, spos):

        self.Heap[fpos], self.Heap[spos] = (self.Heap[spos], self.Heap[fpos])

    def maxHeapify(self, pos):

        if not self.isLeaf(pos):
            if (self.Heap[pos] < self.Heap[self.leftChild(pos)] or
                self.Heap[pos] < self.Heap[self.rightChild(pos)]):

                if (self.Heap[self.leftChild(pos)] >
                    self.Heap[self.rightChild(pos)]):
                    self.swap(pos, self.leftChild(pos))
                    self.maxHeapify(self.leftChild(pos))

                else:
                    self.swap(pos, self.rightChild(pos))
                    self.maxHeapify(self.rightChild(pos))

    def insertNode(self, element):

        if self.size >= self.maxsize:
            return
        self.size += 1
        self.Heap[self.size] = element

        current = self.size

        while (self.Heap[current] >
            self.Heap[self.parent(current)]):
            self.swap(current, self.parent(current))
            current = self.parent(current)

    def Print(self):

        for i in range(1, (self.size // 2) + 1):
            print("PARENT NODE : " + str(self.Heap[i]) +
                " LEFT CHILD : " + str(self.Heap[2 * i]) +
                " RIGHT CHILD : " + str(self.Heap[2 * i + 1]))

    def extractMaximum(self):

        popped = self.Heap[self.FRONT]
        self.Heap[self.FRONT] = self.Heap[self.size]
        self.size -= 1
        self.maxHeapify(self.FRONT)

        return popped

if __name__ == "__main__":

    maxHeap = MaxHeap(15)
    maxHeap.insertNode(5)
    maxHeap.insertNode(9)
    maxHeap.insertNode(1)
    maxHeap.insertNode(11)
    maxHeap.insertNode(28)
    maxHeap.insertNode(19)
    maxHeap.insertNode(7)
    maxHeap.insertNode(2)
    maxHeap.insertNode(8)

    maxHeap.Print()

    print("The Max val is of Max Heap will be " + str(maxHeap.extractMaximum()))


    
#output:
PARENT NODE : 28 LEFT CHILD : 11 RIGHT CHILD : 19
PARENT NODE : 11 LEFT CHILD : 8 RIGHT CHILD : 9
PARENT NODE : 19 LEFT CHILD : 1 RIGHT CHILD : 7
PARENT NODE : 8 LEFT CHILD : 2 RIGHT CHILD : 5
The Max val is of Max Heap will be 28
